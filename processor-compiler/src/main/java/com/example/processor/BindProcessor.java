package com.example.processor;

import com.example.util.Logger;
import com.google.auto.common.MoreElements;
import com.google.auto.service.AutoService;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

import org.apache.commons.collections4.CollectionUtils;

import java.io.IOException;
import java.lang.reflect.ParameterizedType;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.type.TypeMirror;

import open.cklan.com.annotation.BindLayout;
import open.cklan.com.annotation.BindView;

import static com.example.util.Consts.*;
@AutoService(Processor.class)
@SupportedSourceVersion(SourceVersion.RELEASE_7)
public class BindProcessor extends AbstractProcessor{
    Logger logger;
    Filer filer;
    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        logger=new Logger(processingEnv.getMessager());
        filer=processingEnv.getFiler();
        logger.info("init");
    }

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        Set<String> supportAnnotationTypes=new LinkedHashSet<>();
        supportAnnotationTypes.add(BindLayout.class.getName());
        supportAnnotationTypes.add(BindView.class.getName());
        return supportAnnotationTypes;
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        logger.info("process");
        if(!CollectionUtils.isEmpty(annotations)){
            logger.info("开始我的表演");
            handBindLayout(roundEnv);
            logger.info("结束我的表演");
            return true;
        }
        return false;
    }

    private void handBindLayout(RoundEnvironment roundEnv) {
        Set<? extends Element> bindLayoutElements = roundEnv.getElementsAnnotatedWith(BindLayout.class);
        if(!CollectionUtils.isEmpty(bindLayoutElements)){
            try {
                for (Element element :bindLayoutElements) {
                    if(element.getKind()== ElementKind.CLASS){
                        generateBindLayoutHelper(element);
                    }else{
                        logger.error("BindLayout 必须使用在Class上");
                    }
                }
            } catch (IOException e) {
                logger.error(e.getMessage());
            }
        }
    }

    private void generateBindLayoutHelper(Element element) throws IOException {
        TypeMirror typeMirror = element.asType();
        TypeName typeName = TypeName.get(typeMirror);
        if(typeName instanceof ParameterizedTypeName){
            typeName=((ParameterizedTypeName) typeName).rawType;
        }
        String className=element.getSimpleName()+SEPARATOR+BINDLAYOUT_HELPER_NAME;
        TypeSpec.Builder typeBuilder=TypeSpec.classBuilder(className)
                .addModifiers(Modifier.PUBLIC)
                .addJavadoc("Generated by $S",this.getClass().getSimpleName());
        int layoutId=element.getAnnotation(BindLayout.class).value();
        MethodSpec.Builder methodBuilder=MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PUBLIC)
                .addParameter(typeName,"activity")
                .addStatement("activity.setContentView($L)",layoutId);
        List<? extends Element> enclosedElements = element.getEnclosedElements();
        for(Element fieldElement:enclosedElements){
            BindView bindView = fieldElement.getAnnotation(BindView.class);
            if(fieldElement.getKind()== ElementKind.FIELD && bindView !=null){
                VariableElement variableElement= (VariableElement) fieldElement;
                TypeName fieldTypeName =TypeName.get(fieldElement.asType());
                if(fieldTypeName instanceof ParameterizedTypeName){
                    fieldTypeName=((ParameterizedTypeName) fieldTypeName).rawType;
                }
                methodBuilder.addStatement("activity.$L = ($T)activity.findViewById($L)",
                        variableElement.getSimpleName().toString(),
                        fieldTypeName,
                        bindView.value());
            }
        }

        typeBuilder.addMethod(methodBuilder.build());
        logger.info("生成类名"+className);
        JavaFile file=JavaFile.builder(MoreElements.getPackage(element).getQualifiedName().toString(),typeBuilder.build())
                .build();
        logger.info("生成包名"+GENERATE_FILE_PACKAGE_NAME);
        file.writeTo(filer);
        logger.info("生成代码完成");

    }

}
